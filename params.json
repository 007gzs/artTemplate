{"name":"Arttemplate","body":"<div id=\"header\">\r\n  <h1 class=\"title\"><strong>artTemplate</strong></h1>\r\n  <div class=\"summary\" id=\"summary\">\r\n<p>artTemplate 是新一代 javascript 模板引擎，它采用预编译方式让性能有了质的飞跃，并且充分利用 javascript 引擎特性，使得其性能无论在前端还是后端都有极其出色的表现。在 chrome 下渲染效率测试中分别是知名引擎 Mustache 与 micro tmpl 的 25 、 32 倍。</p>\r\n<p>除了性能优势外，调试功能也值得一提。模板调试器可以精确定位到引发渲染错误的模板语句，解决了编写模板过程中无法调试的痛苦，让开发变得高效，也避免了因为单个模板出错导致整个应用崩溃的情况发生。</p>\r\n<p>artTemplate 这一切都在 1.7kb(gzip) 中实现！</p>\r\n  </div>\r\n</div>\r\n<div id=\"main\">\r\n  <div class=\"card\">\r\n    <h2>快速上手</h2>\r\n    <h3>模板语法</h3>\r\n    <p>模板逻辑语法默认采用原生的 javascript 语法，与微型模板引擎 tmpl 保持一致。</p>\r\n    <p>模板逻辑语法开始与结束的界定符号为&quot;&lt;%&quot; 与 &quot;%&gt;&quot;，&quot;&lt;%&quot;后面紧跟&quot;=&quot;号则输出变量内容，如：</p>\r\n<pre>&lt;ul&gt;\r\n    &lt;% for (i = 0; i &lt; list.length; i ++) { %&gt;\r\n        &lt;li&gt;条目内容 &lt;%= i + 1 %&gt; ：&lt;%= list[i] %&gt;&lt;/li&gt;\r\n    &lt;% } %&gt;\r\n&lt;/ul&gt;</pre>\r\n    <h3 style=\"margin-top:60px\">定义模板    </h3>\r\n    <p>(1) 页面中 type=&quot;text/html&quot; 的脚本标签会被浏览器忽略，可以不用考虑转义也能分行书写模板。</p>\r\n    <p>例如定义一个 ID 为 &quot;t-list&quot; 的模板：</p>\r\n<pre>&lt;script id=&quot;t-list&quot; type=&quot;text/html&quot;&gt;\r\n&lt;ul&gt;\r\n    &lt;% for (i = 0; i &lt; list.length; i ++) { %&gt;\r\n        &lt;li&gt;条目内容 &lt;%= i + 1 %&gt; ：&lt;%= list[i] %&gt;&lt;/li&gt;\r\n    &lt;% } %&gt;\r\n&lt;/ul&gt;\r\n&lt;/script&gt;   </pre>\r\n    <p>(2) 如果想在脚本文件中存放模板，可以使用 template 方法定义模板，如：</p>\r\n    <pre>var render = template('&lt;% for (var i in names) { %&gt;&lt;%=name[i]%&gt;&lt;% } %&gt;');\r\nvar html = render(data);//渲染</pre>\r\n    <p> 或者： </p>\r\n    <pre>template('t-test', '&lt;% for (var i in names) { %&gt;&lt;%=name[i]%&gt;&lt;% } %&gt;');</pre>\r\n    <h3 style=\"margin-top:60px\">渲染模板</h3>\r\n    <p>如果 template 第二个参数为 Ojbect 类型，则表示渲染模板：</p>\r\n<pre>var html = template('t-list', {\r\n\tlist: ['文艺', '博客', '摄影', '电影', '民谣', '旅行', '吉他']\r\n});</pre>\r\n    <p>以上就是 artTemplate 的基本功能使用，接下来是高级功能介绍。</p>\r\n  </div>\r\n  <div class=\"card\">\r\n    <h2>扩展方法</h2>\r\n    <p>artTemplate 的模板语句将会在沙箱中执行，此时模板语句无法读写外部对象（甚至使用内联函数 this 访问全局也被禁止），若让模板访问公用数据与方法可以使用 template.method() 接口进行定义。</p>\r\n    <p>扩展方法一般用来进行字符串替换，如XSS过滤、UBB替换、脏话替换等。例如扩展一个XSS过滤方法：</p>\r\n<pre>template.method('escapeHTML', (function () {\r\n\r\n    var rHtml = /&amp;(?!\\w+;)|[&lt;&gt;&quot;']/g;\r\n    var map = {\r\n        \"&\": \"&amp;amp;\",\r\n        \"&lt;\": \"&amp;lt;\",\r\n        \"&gt;\": \"&amp;gt;\",\r\n        '&quot;': \"&amp;quot;\",\r\n        \"'\": \"&amp;#39;\"\r\n    };\r\n    \r\n    var fn = function (s) {\r\n        return map[s] || s;\r\n    };\r\n    \r\n    return function (content) {\r\n        return typeof content === 'string'\r\n        ? content.replace(rHtml, fn)\r\n        : content;\r\n    };\r\n\r\n})());</pre>\r\n<p>在模板中的使用方式：</p>\r\n    <pre>&lt;%= escapeHTML(content) %&gt;</pre>\r\n    <p>模板中已经内置模板包含方法：</p>\r\n    <p>include(id, [data])&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data 参数可选，默认为传入当前模板数据</p>\r\n  </div>\r\n    <div class=\"card\">\r\n  \t<h2>自定义界定符</h2>\r\n  \t<p>若前端模板语法与后端语法产生冲突，可以修改模板引擎界定符，例如：</p>\r\n        <pre>template.openTag = &quot;&lt;!--[&quot;;\r\ntemplate.closeTag = &quot;]--&gt;&quot;;</pre>\r\n  </div>\r\n  <div class=\"card\">\r\n  \t<h2>自定义语法</h2>\r\n  \t<p>若想使用更加简洁的模板逻辑语法，把语法库 <a href=\"template-statement.js\">template-statement.js</a> 合并到 <a href=\"template.js\">template.js</a> 即可使用新语法，此时界定符号改为 \"{\" 与 \"}\"，新语法示例：</p>\r\n  \t<pre>{if title}<br />    &lt;h3&gt;{echo title}&lt;/h3&gt;<br />    &lt;ul&gt;<br />        {each list as val i}<br />            &lt;li&gt;条目内容 {echo i + 1} ：{echo val}&lt;/li&gt;<br />        {/each}<br />    &lt;/ul&gt;<br />{/if}</pre>\r\n<h3>支持的语句：</h3>\r\n    <ul>\r\n      <li><strong>条件</strong>：{if ...} {else if ...} {else} {/if}</li>\r\n      <li><strong>遍历</strong>：{each ...} {/each}</li>\r\n      <li><strong>输出</strong>：{echo ...}</li>\r\n      <li><strong>包含</strong>：{include ...}</li>\r\n    </ul>\r\n  artTemplate 引擎支持自由扩展语法，请参考 <a href=\"template-statement.js\">template-statement.js</a> 举一反三。</div>\r\n\r\n  <div class=\"card\">\r\n  \t<h2>模板语法规范</h2>\r\n  \t<p>1、不能使用 javascript 关键字作为模板变量，包括 ECMA5 严格模式下新增的关键字:  </p>\r\n    <pre>break,case,catch,continue,debugger,default,delete,do,else,false,finally,for,function,if,in\r\n,instanceof,new,null,return,switch,this,throw,true,try,typeof,var,void,while,with\r\n   \r\n,abstract,boolean,byte,char,class,const,double,enum,export,extends,final,float,goto\r\n,implements,import,int,interface,long,native,package,private,protected,public,short\r\n,static,super,synchronized,throws,transient,volatile\r\n \r\n,arguments,let,yield</pre>\r\n\t<p>2、不能读写全局变量，除非给模板定义扩展方法。</p>\r\n  </div>\r\n  <div class=\"card\">\r\n  \t<h2>自动化打包工具</h2>\r\n  \t<p> 有时候考虑到模板复用或者需要异步加载，可以使用 tools 目录下的自动化合并工具，有 HTML 与批处理两个版本。其中批处理版本可以把页面内嵌的模板抽取出来在同目录生成对应的 js 文件，以便使用 seajs 等脚本加载器异步加载。 </p>\r\n  </div>\r\n    <div class=\"card\">\r\n  \t<h2>与 tmpl 兼容</h2>\r\n  \t<p> artTemplate 可以通过简单的设置兼容 john 开发的 tmpl 微型模板引擎： </p>\r\n  \t<pre>var tmpl = template;\r\ntemplate.method('tmpl', template.render);</pre>\r\n  \t<p>这样可以由 tmpl 平滑迁移到 artTemplate，并原来 tmpl 模板中的套嵌仍然有效，同时也解决了 tmpl 模板不能包含单引号与反斜杠的 BUG。</p>\r\n  \t<p>需要注意的地方：tmpl 模板中原来引用的全局变量会因为 artTemplate 沙箱机制导致无法访问，需要通过 template.method() 方法进行定义。</p>\r\n    </div>\r\n  <div class=\"card\">\r\n  \t<h2>演示</h2>\r\n    <ul>\r\n        <li><a href=\"./test/test.html\">基本例子</a></li>\r\n        <li><a href=\"./test/test-include.html\">嵌入子模板</a></li>\r\n        <li><a href=\"./test/test-method.html\">扩展方法</a></li>\r\n        <li><a href=\"./test/test-statement.html\">自定义语法</a></li>\r\n        <li><a href=\"./test/test-debug.html\">错误调试</a></li>\r\n        <li><a href=\"./test/test-statement-debug.html\">错误调试[自定义语法]</a></li>\r\n        <li><a href=\"./test/test-tag.html\">自定义界定符</a></li>\r\n        <li><a href=\"./test/test-undefined.html\">未定义数据输出</a></li>\r\n        <li><a href=\"./test/test-tmpl.html\">与tmpl兼容</a></li>\r\n        <li><a href=\"./test/test-compiled.html\">编译原理</a></li>\r\n        <li><a href=\"./test/test-speed.html\">引擎渲染速度竞赛</a></li>\r\n    </ul>\r\n  </div>\r\n  \r\n</div>\r\n\r\n","tagline":"JavaScript Template Engine","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}